// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1454716963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4f\x8f\xda\x3e\x10\xbd\xe7\x53\xcc\x8f\xc3\xc6\xd1\x2f\x0a\x3d\x83\xa8\xd4\xc3\x1e\xb7\xaa\xb6\xed\xa1\x42\x28\x0a\xc9\x00\x6e\x13\x3b\xb5\x1d\x96\x6a\x97\xef\xde\xb1\x1d\x83\x41\xd1\x36\xd2\x6a\xf1\xbc\x79\xf3\xe7\x79\xc6\xc7\x4a\x41\xa9\x70\x07\x2b\x50\xf8\x7b\xe0\x0a\x59\x5a\xcc\x75\xad\x78\x6f\xe6\x42\x36\x58\x76\xb2\x19\x5a\xd4\xf3\x4a\xff\x12\xa8\x8d\x54\x69\xb6\x4c\x2c\xed\x59\x6e\xa5\x21\x9e\xa5\x17\xee\xe0\xed\xdf\xf0\x64\x9e\x50\xeb\x6a\x8f\x01\x8d\x4c\xde\xe7\xbb\x46\x15\x40\xfb\xdb\x5b\x3f\xbb\xf8\x9f\x9a\xaa\x37\x57\xf8\xc6\xb8\x4c\x12\x3c\xf5\x52\x19\x5d\x1c\x2a\xd1\xb4\x36\xc3\x6e\x10\xb5\xe1\x52\x30\x3c\xa2\x30\x39\xd4\xe6\x94\xc1\x6b\x02\x60\x43\x76\x5c\x6b\x2e\xf6\x8f\xe2\x48\x9e\xeb\x0d\xf1\x01\x76\x52\x31\x8b\x8d\x0d\x37\x04\x7e\x51\xb2\x07\x2e\xc0\x85\x28\xca\xd2\x77\x5a\x06\x8f\x12\xc5\xd1\xc7\x04\xe0\x3b\xf6\x8e\xd7\xfa\x2e\xe8\x06\x56\x2b\x30\x6a\x40\x78\x78\x70\x74\xfb\xb1\xff\xd8\xbf\x73\xbb\x94\x6f\x6f\x17\xd2\x04\x3e\x99\x6c\x36\xcb\x42\xa9\x10\xb5\x5f\xf4\x83\x3e\xdc\xa7\xa5\x9b\xb4\x5e\xe7\xc4\xfe\x25\xae\xb7\x88\xd1\xa2\xd8\x9b\x03\x7c\x84\x0f\x21\x20\x49\x5b\xe8\xa1\xae\x11\x1b\x16\x52\x18\x49\x02\xf4\xed\x9f\x05\xac\x67\x3f\xe4\x00\x82\x40\x32\x82\x46\x03\xe6\x80\xa4\x76\xdb\xca\x17\x0a\x09\x54\x31\x57\x52\x74\xd4\x86\xbd\x1b\x5e\x6d\x69\xae\x16\x30\x83\xff\xe3\x3a\x7f\x4a\x2e\x58\x9a\x43\x9a\x6d\x7c\x71\xae\xc8\x33\x60\xab\x71\x2c\x23\x5c\x20\xbe\x2f\x5e\xa8\xb0\x57\xb2\xa6\xe1\x2b\xac\x62\x78\x51\x6a\x4a\xcf\x80\x06\x59\xdc\x3f\x85\x6d\x75\x7a\xb4\xce\x11\xc9\x19\x4b\x77\xf2\xce\x83\x9f\x68\x81\x2f\x6e\xb8\xd9\x95\x55\x58\xa8\x1c\x78\x93\x5f\xef\x32\xfa\x5e\x27\xad\x94\x56\xca\x6e\x11\x25\x2f\x6a\x9a\x78\x81\xad\x8d\x34\x49\x39\x8f\xb7\xd9\x5d\x76\xcf\x16\x13\xad\x1e\xb3\x85\xe4\x71\x48\x43\xe0\xc8\x52\xe3\x36\x5b\x8e\x5b\x66\x76\xe3\x57\x75\xae\x83\x98\xec\x25\x20\x4f\x8f\xa4\x5e\x47\x3a\xd3\xe5\x05\x99\x1a\xdc\x0e\xfb\x27\x7a\x46\xe2\x2c\x45\x75\xd9\x70\x9b\xed\x66\xc1\x99\xf3\xc8\x96\x41\xfa\xf1\x49\xf2\x0f\x52\x9a\xdd\xc1\x2e\x9a\xc2\x1a\xf9\x11\xd9\xd8\x77\x7e\x7d\x10\x1a\x29\xf0\x3a\x06\x53\xc3\xeb\xc6\x57\xa3\x68\x16\x63\x30\x23\xbf\xd2\x29\x8f\xe1\x71\xba\x03\xfe\x6c\x8f\xc9\xad\xe4\xe3\x8c\x26\xe7\xe4\x6f\x00\x00\x00\xff\xff\xa4\x8f\xbd\xc0\x50\x05\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1360, mode: os.FileMode(420), modTime: time.Unix(1454716951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

