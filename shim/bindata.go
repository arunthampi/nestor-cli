// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1460506883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\x3d\xb4\x36\x16\x28\x3b\xbb\x6b\xf7\x81\x75\xc0\x0e\x1d\x8a\x7d\x9c\x8a\xc1\x70\x2c\xc6\x15\x60\x4b\x9e\x3e\xbc\x00\x45\xfe\xfb\x28\xc9\x76\x14\x27\xeb\x21\xa8\xf8\x1e\xdf\xa3\x48\xca\x43\xa5\xa1\xd4\xb8\x83\x3b\xd0\xf8\xc7\x09\x8d\xd9\x0d\xdb\x98\x5a\x8b\xde\x6e\xa4\xe2\x58\x76\x8a\xbb\x16\xcd\x46\xa2\xb1\x4a\x6f\x95\xbd\xc9\x6f\x57\x3e\xed\xbb\xa2\x03\xe5\xf9\x74\x16\x0e\x31\xfe\x13\xf7\xf6\x11\x8d\xa9\x1a\x9c\xd0\x24\x14\x39\xbf\x0c\xea\x09\xf4\xff\xc7\xe8\xb7\x60\xf1\x91\x57\xbd\x3d\xc2\x27\xc1\xd1\x19\x4d\xaf\xa4\x99\xe5\xa7\x73\x44\x17\xde\xb3\xef\x0a\xf7\xbd\xd2\xd6\xb0\x97\x4a\xf2\xd6\xe3\x3b\x27\x6b\x2b\x94\xcc\x70\x40\x69\xd7\x50\xdb\x7d\x0e\xaf\x2b\x00\x2f\xa3\xb1\xad\xf6\x0f\x1e\x20\x66\x20\xb0\xb2\x0c\xc1\x32\x9c\x6e\x47\x9e\x8b\x57\x91\xf8\x37\xdc\x2a\x3b\xe6\x31\x0f\x95\x4e\xf0\x35\x51\xcf\xff\x5e\x2f\x46\x01\xb4\x52\x5d\x91\xd8\xb3\x9a\x0a\x96\xd8\x7a\xa5\x8b\x29\x87\x7c\xaa\xa5\x33\xcd\x58\x4a\xd2\xf1\xcc\x97\x31\x53\xf4\x38\x35\x4f\x0a\x43\x4b\x0b\xb6\x58\x75\xa1\xe0\xd4\x3e\xde\x99\x98\x11\x99\x5a\xc1\x71\xeb\x9a\x47\xda\x90\x20\x1d\x64\xd9\xb8\x42\xfc\x41\x0e\x49\xd3\xe2\xe6\x94\x13\x58\xa2\x1c\x7c\xca\x66\x03\x4f\xa4\xad\x2a\x0e\x9f\x74\x25\xe4\xac\xb2\xf5\x27\xd6\xa1\x6e\xf0\x73\x65\xab\x6c\xa1\x13\xe0\x7c\xa1\x40\x9a\x42\x2b\xd9\x11\x93\x80\x9d\xd2\x99\xbf\x2c\x45\x9f\xb4\xea\x41\xc8\x65\x31\x84\xe4\xe3\x04\x7a\xad\x6a\xea\x14\xa3\xd0\xf3\x98\xf0\xfb\xbc\xfa\x14\xf5\xde\x87\x53\x7f\xdf\x63\x93\x38\x8b\x0b\x9e\x81\x33\xb9\x86\xd5\x39\xb7\x09\x9c\x67\x11\x2c\x4e\xfb\xe1\x91\x2f\x4a\x7f\xe5\x99\x63\x7e\x0e\x2e\x8f\x65\xd0\x8f\xd8\xa5\x43\x14\x1d\xdc\xdd\x81\xd5\x0e\x27\xaf\x93\x09\xef\xfd\xf4\xaf\xde\x7d\xb8\x82\x37\xff\x9d\x32\x41\x57\xf7\x05\x2c\x28\x3e\x77\xf6\xec\xe6\x57\x76\x69\xdd\xd6\xcb\xbc\xb8\x24\xd3\x17\x26\x7e\x5f\x6e\xf2\x2c\x5c\x90\xb0\x64\x83\x6a\x14\x03\x66\xa3\xfc\xfa\xf8\x46\xb9\x92\xf3\x85\xe8\xa1\x32\xe3\xea\x1a\x91\x67\xd3\x33\xb2\xaa\x34\x28\x79\x31\x0a\x59\xf5\x83\x4e\xeb\x04\x74\x4d\x43\x3d\x2e\x20\x9b\x09\x31\x02\xd7\xd7\xb0\x08\xb1\x16\x65\x63\x5f\xe0\x1e\xde\xe6\xf0\x7e\x89\x42\x01\xd2\xb5\xed\xa4\x1d\xc6\x53\x9c\xcc\x8a\xd3\xda\xb2\xb2\xd7\x62\xa8\x2c\xae\x8e\x6f\xd4\xff\x1e\x56\xff\x02\x00\x00\xff\xff\xfb\xcf\x9c\x2b\x74\x05\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1396, mode: os.FileMode(420), modTime: time.Unix(1460506870, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

