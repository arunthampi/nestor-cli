// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1458018537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x46\x3e\xc4\xa0\xa2\x75\xcf\xa4\x4e\xdb\x43\x8e\xa9\xaa\x7e\x9c\xaa\x0a\x11\x76\x4c\x90\x60\x97\xee\x07\x45\x8a\xfc\xdf\xbb\x9f\x78\x83\xdd\x1c\x22\xcf\xbc\x37\xf3\x66\xde\x0e\x73\x23\xa0\x16\x78\x82\x23\x08\xfc\xa3\x7b\x81\xf9\x9e\x1c\x64\x2b\xfa\x49\x1d\x18\xa7\x58\x8f\x9c\xea\x01\xe5\x81\xa1\x54\x5c\x3c\x73\xb5\x2f\xee\x33\x5b\xf6\x8d\x9b\xc0\xd4\xd9\x72\xe2\x02\x9f\xff\x81\x8b\x7a\x42\x29\x9b\x0e\x23\x9a\xa4\x3c\xe7\xa7\x44\x11\x41\xfb\xdb\x67\xbf\x38\x89\xcf\xb4\x99\xd4\x05\x7e\x93\x0c\xca\x28\x27\xce\xe4\xda\x3e\xc6\x1e\xdd\x68\xaf\xba\x19\x2e\x13\x17\x4a\x92\x97\x86\xd1\xc1\xe2\x27\xcd\x5a\xd5\x73\x96\xe3\x8c\x4c\x95\xd0\xaa\xa5\x80\xd7\x0c\xc0\xb6\x11\x38\x34\xcb\xa3\x05\x0c\xd3\x11\x48\x5d\xbb\x64\xed\xa2\xfb\xc0\xd3\x7e\x15\x86\x7f\xdd\x56\xf9\xa5\x8e\x58\xa8\xd6\x3d\x2d\x0d\xf5\xfa\xef\xf5\x66\x16\x40\x70\x3e\x56\x89\x3c\x69\xcd\xc0\x0c\x07\xdb\xe9\x66\xc9\xb9\x88\xb3\x8c\xb2\x0b\xa3\x24\x8e\xe7\x76\x8c\x95\x22\xc2\xab\x59\x92\x7b\xb4\x74\x60\x85\xcd\xe8\x06\x4e\xe5\xfd\xce\x86\xe9\x91\x68\x05\xc5\x67\xdd\x3d\x99\x0b\x71\xad\x5d\x5b\x12\x4e\x88\x3e\xb2\x39\x31\xcd\x5f\x4e\x1d\xc1\x1a\xd9\x6c\x5e\x03\xe0\xc4\x45\x6e\x47\x32\xf1\x57\xc1\x27\xe8\xd9\xb6\xc4\x20\x45\xf0\x69\x12\xbc\x35\xfb\x10\x93\xfa\x15\x0a\x7e\x5f\x6b\xa4\xa8\x1d\xeb\x6c\x75\xfa\x53\xba\x63\x3f\xc2\xf1\x08\x4a\x68\x8c\xad\xdf\x18\xb0\x58\x73\x76\x1f\x3e\xed\xe0\xdd\x7f\x4d\x30\xd0\xee\xa1\x82\x0d\xc5\xd6\xae\x9a\xe3\x7a\x84\xb7\x5e\xa3\xdc\xd6\x79\x0f\xe3\x07\xe8\x3f\xbf\x7d\x91\x3b\x57\x0b\x67\x56\x34\xb8\xc5\x7e\xc6\x3c\xb4\x2f\x2f\x27\x4c\x39\x5b\x17\x32\x77\x4c\xa4\x6e\x5b\x44\x9a\xc7\x2b\x53\xbc\x96\xc8\x68\x15\x1a\x29\xfe\xdd\x44\x65\x02\xea\xae\x33\x1e\x56\x90\xaf\x04\x9f\x81\xbb\x3b\xd8\xa4\xc8\x80\xac\x53\x2f\xf0\x00\xef\x0b\xf8\xb8\x45\xa1\x02\xa6\x87\x21\xbb\x9c\xa6\xfd\x7f\xce\xfe\x05\x00\x00\xff\xff\x1a\x76\x73\xe0\x6b\x04\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1131, mode: os.FileMode(420), modTime: time.Unix(1458018527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

