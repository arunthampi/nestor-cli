// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1454094666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x4f\x4f\xac\x30\x10\xbf\xf3\x29\x7a\xa3\xbc\x90\x2e\x2f\xef\xf6\x36\x1e\x3c\x78\xd4\x18\xb3\x9e\x8c\x21\xb5\xcc\x2a\x11\x5a\x6c\x0b\x92\x6c\xf8\xee\x4e\xa7\x2c\x0b\x71\xf7\xb0\xa1\xbf\x7f\x9d\xe9\xcc\x20\x2d\x2b\x2d\x1c\xd9\x0d\xb3\xf0\xd5\xd7\x16\x78\x2a\x76\x4e\xd9\xba\xf3\x3b\x6d\x2a\x28\x5b\x53\xf5\x0d\xb8\x9d\x74\x9f\x1a\x9c\x37\x36\xcd\xf6\x49\xb0\x3d\x99\x37\xe3\xd1\x17\xec\x82\x0e\x11\x3f\xc0\xe8\xef\xc1\x39\xf9\x0e\x67\x76\x05\x45\xcd\xb3\x03\x7b\x26\xc3\x77\x44\x1f\x28\xff\xb6\x92\x9d\xbf\xd0\x1b\x70\x9f\x24\x30\x76\xc6\x7a\x27\x3e\xa4\xae\x9a\x70\xc3\xb1\xd7\xca\xd7\x46\x73\x18\x40\xfb\x9c\x29\x3f\x66\xec\x94\x30\x76\x34\x96\x87\x58\xd0\xc3\xa3\x35\x1d\xab\x35\x23\x89\x28\xcb\xd8\x49\x89\x4c\x94\x32\xd6\x59\xa3\xb0\x42\x81\xd0\xcb\x6c\x78\xc5\xf0\xdf\x86\x85\xdd\xa3\x6f\x4a\xf0\xcf\x42\x23\xc7\xbb\x20\x5c\x19\x08\x2c\xe9\x14\x84\x7d\x6c\x58\xc3\x37\xf5\xce\x2f\x1e\x11\xa8\xb2\xaf\xab\x9c\xea\xd8\xfe\x4e\x57\x30\xbc\xd0\x98\xf6\xff\xea\x5a\xa1\xf0\x31\x34\x34\x21\xe5\x8a\x61\xca\x42\x05\xed\x32\x92\x50\xc4\x6a\x22\x3c\x14\x90\xaf\xe3\x3c\x92\xe4\xb1\xf3\x88\x83\x83\x26\xcc\x37\x2a\xd9\x52\xdd\x6b\x6b\x6c\x1b\x95\x91\x49\xe3\xbb\xe1\x39\xbd\x04\x0a\xb9\x4c\x38\x04\x6f\x06\xcc\x49\x81\x5a\x7a\xd7\x79\x21\xe3\x3a\xa6\xd9\x86\xa4\x24\x0b\x0a\xea\x01\xf8\xdc\x5c\xa4\x1c\xf8\x43\xdd\x82\xe9\x3d\x5f\x76\xe3\x3c\x66\x5c\x0e\xe1\x7a\xa5\x00\x2a\x4e\x15\x4d\x39\xfb\x57\xb0\x3f\xec\x6f\x51\x14\x08\x4c\xc9\x4f\x00\x00\x00\xff\xff\xbe\xa5\x27\x85\x12\x03\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 786, mode: os.FileMode(420), modTime: time.Unix(1454094609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
