// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1455006003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4b\x6f\xdb\x30\x0c\xbe\xfb\x57\x70\x39\x34\x32\x16\x38\x3b\x27\xc8\x80\x1d\x7a\xec\x30\xec\x71\x18\x82\xc0\x70\x6c\x26\xd1\x60\x4b\x9e\x1e\x69\x86\x36\xff\x7d\x94\x64\xc5\x6a\x61\xb4\x06\x8a\x46\xfc\xf8\xf1\xf1\x91\xd2\xb9\x52\x50\x2a\x3c\xc0\x06\x14\xfe\xb5\x5c\x21\x9b\x17\x4b\x5d\x2b\xde\x9b\xa5\x90\x0d\x96\x9d\x6c\x6c\x8b\x7a\x29\x50\x1b\xa9\xf6\xd2\xcc\xf3\x75\xe6\x68\xdf\x25\x1d\x88\xe7\xe8\x85\x3f\x04\xfb\x4f\xbc\x98\x07\xd4\xba\x3a\x62\x44\x13\x53\xf0\xf9\xa5\x51\x45\xd0\xfd\x0e\xd6\xaf\x3e\xc5\x97\xa6\xea\xcd\x08\xbf\x30\xae\xb3\x0c\x2f\xbd\x54\x46\x17\xa7\x4a\x34\xad\xcb\x70\xb0\xa2\x36\x5c\x0a\x86\x67\x14\x66\x01\xb5\xb9\xe4\xf0\x94\x01\xb8\x90\x1d\xd7\x9a\x8b\xe3\xbd\x38\x93\xe7\x76\x47\x7c\x80\x83\x54\xcc\x61\x43\xc3\x0d\x81\xdf\x94\xec\x81\x0b\xf0\x21\x8a\xb2\x0c\xcd\x96\xd1\xa3\x44\x71\x0e\x31\x01\xf8\x81\xbd\xe1\xb5\x7d\x15\x74\x07\x9b\x0d\x18\x65\x11\xee\xee\x3c\xdd\x7d\xec\x03\x7b\x3f\xb7\x4f\xf9\xfc\x7c\x23\x4d\xe0\x93\xc9\x66\xb3\x3c\x96\x0a\x49\xfb\x45\x6f\xf5\xe9\x75\x5a\x9a\xa4\xf3\xba\x66\xee\x2f\xf3\xbd\x25\x8c\x16\xc5\xd1\x9c\xe0\x33\x7c\x8a\x01\x49\xda\x42\xdb\xba\x46\x6c\x58\x4c\x61\x24\x09\xd0\xb7\xff\x56\xb0\x9d\xfd\x96\x16\x04\x81\x64\x04\x8d\x06\xcc\x09\x49\xed\xb6\x95\x8f\x14\x12\xa8\x62\xae\xa4\xe8\xa8\x0d\x37\x1b\x5e\xed\x69\xaf\x56\x30\x83\x8f\x69\x9d\x7f\x24\x17\x6c\xbe\x80\x79\xbe\x0b\xc5\xf9\x22\xaf\x80\xad\xc6\xa1\x8c\x38\x40\x7c\x5b\xbc\x58\x61\xaf\x64\x4d\xcb\x57\x38\xc5\xf0\xa6\xd4\x94\x9e\x11\x8d\xb2\xf8\x7f\x0a\xdb\xea\x72\xef\x9c\x13\x92\x37\x96\xfe\x14\x9c\x6d\xd8\x68\x81\x8f\x7e\xb9\xd9\xc8\x2a\x1c\x54\x5a\xde\x2c\xc6\x59\x26\xdf\xd3\xa4\x95\xd2\x4a\xd9\xad\x92\xe4\x45\x4d\x1b\x2f\xb0\x75\x91\x26\x29\xd7\x61\x9a\xdd\xed\xee\xb9\x62\x92\xab\xc7\x5c\x21\x8b\x34\xa4\x21\x70\x60\xa9\xe1\x36\x3b\x8e\xbf\xcc\xec\x85\x5f\xd5\xf9\x0e\x52\x72\x90\x80\x3c\x03\x12\x95\x69\x70\x6f\x8f\x0f\xf4\x72\xe4\xeb\xa8\xdf\xf0\xae\x84\x57\x65\x9e\x33\x9f\xeb\x06\xbb\x03\x05\xab\x91\x9f\x91\x0d\xc5\x2f\xc6\x5b\xdd\x48\x81\xe3\x2c\xa7\x36\xd0\xef\xa0\x46\xd1\xac\x86\x60\x46\xfe\xa0\x53\x94\x3b\xea\x32\x2c\x52\x76\xcd\xfe\x07\x00\x00\xff\xff\x66\x9b\xef\x0a\xf5\x04\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1269, mode: os.FileMode(420), modTime: time.Unix(1455005991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

