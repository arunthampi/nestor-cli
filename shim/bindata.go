// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1460493973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x39\x34\x36\x16\x28\x3b\xbb\x4b\xf7\x81\x75\xc0\x0e\x1d\x8a\x7d\x9c\x8a\xc1\x70\x2c\xc6\x15\x60\x4b\x9e\x24\x7b\x01\x8a\xfc\xf7\x51\xb2\xe5\x28\x6e\xd6\x43\x50\xf1\x3d\xbe\x47\x91\x94\x87\x52\x43\xa1\xf1\x00\x3b\xd0\xf8\xa7\x17\x1a\xd3\x35\xdb\x9a\x4a\x8b\xce\x6e\xa5\xe2\x58\xb4\x8a\xf7\x0d\x9a\xad\x44\x63\x95\xde\x2b\xbb\xce\x6e\x13\x97\xf6\x5d\xd1\x81\xf2\x5c\x3a\xf3\x87\x31\xfe\x13\x8f\xf6\x01\x8d\x29\x6b\x0c\x68\x14\x1a\x39\xbf\x0c\xea\x00\xba\xff\xc7\xe8\x37\x6f\xf1\x91\x97\x9d\x3d\xc3\x17\xc1\xc9\x19\x4d\xa7\xa4\x99\xe5\xc3\x79\x44\x17\xde\xb3\x6f\x82\xc7\x4e\x69\x6b\xd8\x73\x29\x79\xe3\xf0\x43\x2f\x2b\x2b\x94\x4c\x71\x40\x69\x37\x50\xd9\x63\x06\x2f\x09\x80\x93\xd1\xd8\x94\xc7\x7b\x07\x10\xd3\x13\x58\x51\xf8\x60\xe1\x4f\xb7\x13\xaf\x1f\xaf\x22\xf1\xaf\xbf\x55\x7a\xce\x63\x0e\x2a\x7a\xc1\x37\x44\x7d\xfd\xf7\x72\x35\x0a\xa0\x95\x6a\xf3\xc8\x9e\x55\x54\xb0\xc4\xc6\x29\x5d\x4d\x39\x65\xa1\x96\xd6\xd4\x53\x29\x51\xc7\x53\x57\xc6\x4c\xd1\xd3\xd4\x1c\xc9\x0f\x2d\x2e\xd8\x62\xd9\xfa\x82\x63\xfb\xf1\xce\xc4\x1c\x91\xd0\x0a\x8e\xfb\xbe\x7e\xa0\x0d\xf1\xd2\x5e\x96\x4d\x2b\xc4\xef\xe5\x10\x35\x6d\xdc\x9c\x22\x80\x05\xca\xc1\xa5\x6c\xb7\xf0\x48\xda\xaa\xe4\xf0\x49\x97\x42\xce\x2a\x7b\x77\x62\x2d\xea\x1a\x3f\x97\xb6\x4c\x17\x3a\x1e\xce\x16\x0a\xa4\x29\xb4\x92\x2d\x31\x09\x38\x28\x9d\xba\xcb\x52\xf4\x51\xab\x0e\x84\x5c\x16\x43\x48\x36\x4d\xa0\xd3\xaa\xa2\x4e\x31\x0a\x3d\x4d\x09\xbf\x5f\x57\x1f\xa3\xce\xfb\x74\xe9\xef\x7a\x6c\x22\x67\x71\xc5\xd3\x73\x82\x6b\xb4\x3a\xd7\x68\x4f\xc2\xbb\x5c\xb6\xc4\x21\x5f\x94\xfe\xca\xfd\x48\x99\x9b\xc6\x3c\xdb\x53\x42\x3f\xe2\x10\x4f\x53\xb4\xb0\xdb\x81\xd5\x3d\x06\xd3\x8b\x51\x1f\xdd\x1a\xac\xde\x7d\x58\xc1\x9b\xff\x8e\x9b\xa0\xd5\x5d\x0e\x0b\x8a\xcb\x9d\x3d\xdb\xf9\xb9\x5d\xdb\xbb\xcd\x32\x6f\xdc\x96\xf0\xa9\x19\x3f\x34\xeb\x2c\xf5\xd7\x24\x2c\x5a\xa5\x0a\xc5\x80\xe9\x24\xbf\x39\x3f\x56\xae\xe4\x7c\x21\x7a\xb1\xcc\xf4\x55\x85\xc8\xd3\xf0\x9e\xac\x2a\x0c\x4a\x9e\x4f\x42\x56\xfd\xa0\xd3\x26\x02\xfb\xba\xa6\x4e\xe7\x90\xce\x84\x31\x02\x37\x37\xb0\x08\xb1\x06\x65\x6d\x9f\xe1\x0e\xde\x66\xf0\x7e\x89\x42\x0e\xb2\x6f\x9a\xa0\xed\x87\x94\x5f\x4c\x8c\xd3\xfe\xb2\xa2\xd3\x62\x28\x2d\x26\xe7\xc7\xea\x7e\x4f\xc9\xbf\x00\x00\x00\xff\xff\xaf\x0e\x7b\x4e\x7d\x05\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1405, mode: os.FileMode(420), modTime: time.Unix(1460493965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

