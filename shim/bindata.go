// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1460487588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\xc9\x6e\xdb\x30\x10\xbd\xfb\x2b\x06\x3e\xc4\x12\x6a\xd0\x3d\x2b\x75\xda\x02\xcd\x31\x45\xd1\xe5\x54\x14\x04\x2d\x8e\x15\x02\x12\xa9\x72\x51\x0d\x04\xfe\xf7\x72\x11\x65\x59\x71\x72\x08\xcc\x79\xef\xcd\xf2\x66\x34\x30\x0d\x54\xe3\x11\xf6\xa0\xf1\xaf\x13\x1a\x8b\x0d\xd9\x99\x5a\x8b\xde\xee\xa4\xe2\x48\x3b\xc5\x5d\x8b\x66\x27\xd1\x58\xa5\x0f\xca\x6e\xca\xfb\x55\x90\x7d\x57\xfe\xe1\x75\x41\x4e\xe2\x23\xc5\x7f\xe2\xc9\x3e\xa1\x31\xac\xc1\x8c\xce\x42\x89\xf3\xcb\xa0\xce\x60\xf8\x9d\xa2\x5f\x63\x89\xcf\x9c\xf5\xf6\x02\x5f\x05\xc7\xca\x68\x7a\x25\xcd\x94\x3e\xbf\x13\xba\xa8\x3d\xd5\x5d\xe1\xa9\x57\xda\x1a\xf2\xcc\x24\x6f\x03\x7e\x74\xb2\xb6\x42\xc9\x02\x07\x94\x76\x0b\xb5\x3d\x95\xf0\xb2\x02\x08\x69\x34\xb6\xec\xf4\x18\x00\xcf\x8c\x04\x42\x69\x0c\xd2\xf8\xba\x1f\x79\x2e\x8d\x22\xf1\x5f\x9c\xaa\xb8\xe8\x48\x80\xa8\x13\x7c\xeb\xa9\xaf\xff\x5e\x6e\x46\x01\xb4\x52\x5d\x35\x2b\x4f\x6a\xdf\xb0\xc4\x36\x64\xba\x29\x39\x97\xb9\x97\xce\x34\x63\x2b\x33\xc7\x8b\xd0\xc6\x44\xd1\xe3\xd6\x02\x29\x2e\x6d\xde\xb0\x45\xd6\xc5\x86\xe7\xe5\xd3\xcc\x9e\x99\x90\x6c\x05\xc7\x83\x6b\x9e\xfc\x85\xc4\xd4\x31\x2d\x19\x4f\x88\x3f\xca\x61\x66\x5a\xba\x1c\x9a\x41\x8a\x72\xb8\x48\x0e\x9a\x09\x49\x3a\xd4\x0d\x7e\x61\x96\x15\x0b\x51\x84\x7d\x05\xcf\x3f\x2a\x5d\x84\x09\xbc\xfc\x9b\x56\x3d\x08\xb9\xac\xe0\x91\x72\xb4\xb5\xd7\xaa\xf6\xe3\x13\x1f\xfa\x3d\x0a\xfe\xbc\x6e\x69\x8e\x86\x96\xce\xa1\x8e\x38\xce\x2d\x11\x1d\xec\xf7\x60\xb5\xc3\x9c\xfa\xca\xaf\x53\xf0\x72\xfd\xe1\xd3\x1a\xde\xbd\xe9\x99\x87\xd6\x0f\x15\x2c\x28\x41\x3b\xd5\xec\xa6\x9b\xbd\xb5\xbc\xed\x52\x97\x2c\xcf\xdf\x6b\xfa\x5a\x37\x65\x11\x1d\x4d\x66\xe5\x7d\xd4\x28\x06\x2c\xc6\xf4\xdb\xcb\xc5\x73\x25\xa7\x81\xfc\xd9\x13\xe3\xea\x1a\x91\x17\xf9\x28\xad\xa2\x06\x25\xaf\xc6\x44\x56\xfd\xf0\xaf\xed\x0c\x74\x4d\xe3\x3d\xac\xa0\x98\x08\x29\x02\x77\x77\xb0\x08\x91\x16\x65\x63\x9f\xe1\x01\xde\x97\xf0\x71\x89\x42\x05\xd2\xb5\x6d\xce\x1d\x17\x5e\x5d\x1d\x07\xf7\x77\x41\x68\xaf\xc5\xc0\x2c\xae\x2e\x17\x1f\xfe\x9f\x57\xff\x03\x00\x00\xff\xff\x4f\x9d\xc2\x35\xc2\x04\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1218, mode: os.FileMode(420), modTime: time.Unix(1460487561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

