// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1455048478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x8f\xda\x3c\x10\xbe\xe7\x57\xcc\xcb\x61\x71\xf4\x46\xa1\x67\x10\x95\x7a\xd8\xe3\x56\x55\x3f\x0e\x15\x42\x51\x48\x06\x70\x95\xd8\xa9\x3f\x58\x2a\x96\xff\xde\xb1\x1d\x83\x77\x15\x6d\x23\x21\x62\x3f\xf3\xcc\xc7\x33\x33\x39\xd5\x0a\x2a\x85\x7b\x58\x83\xc2\xdf\x96\x2b\x64\xf3\x72\xa1\x1b\xc5\x07\xb3\x10\xb2\xc5\xaa\x97\xad\xed\x50\x2f\x04\x6a\x23\xd5\x4e\x9a\x79\xbe\xca\x1c\xed\xab\xa4\x03\xf1\x1c\xbd\xf4\x87\x70\xff\x1d\xcf\xe6\x09\xb5\xae\x0f\x18\xd1\xe4\x2a\xd8\xfc\xd0\xa8\x22\xe8\xde\xc3\xed\x67\x1f\xe2\x53\x5b\x0f\xe6\x0e\xbf\xba\x5c\x65\x19\x9e\x07\xa9\x8c\x2e\x8f\xb5\x68\x3b\x17\x61\x6f\x45\x63\xb8\x14\x0c\x4f\x28\x4c\x01\x8d\x39\xe7\x70\xc9\x00\x9c\xcb\x9e\x6b\xcd\xc5\xe1\x51\x9c\xc8\x72\xb3\x25\x3e\xc0\x5e\x2a\xe6\xb0\xb1\xe0\x96\xc0\x2f\x4a\x0e\xc0\x05\x78\x17\x65\x55\x85\x62\xab\x68\x51\xa1\x38\x05\x9f\x00\x7c\xcf\xde\xb1\xda\xbc\x71\xba\x85\xf5\x1a\x8c\xb2\x08\x0f\x0f\x9e\xee\x1e\xf6\x1f\xfb\x77\x6c\x1f\xf2\xe5\xe5\x46\x9a\xc0\x27\x83\xcd\x66\x79\x4c\x15\x92\xf2\xcb\xc1\xea\xe3\xdb\xb0\xd4\x49\x67\x75\xcd\xdc\x2f\xf3\xb5\x25\x8c\x0e\xc5\xc1\x1c\xe1\x23\x7c\x88\x0e\x49\xda\x52\xdb\xa6\x41\x6c\x59\x0c\x61\x64\xa5\x51\xb4\x4b\xd8\x5c\xb4\x51\x44\xd5\xf4\x3a\xfb\x29\x2d\x08\x32\x23\x18\x34\x1a\x30\x47\x24\xdd\xbb\x4e\x3e\x93\x05\x50\xee\x5c\x49\xd1\x53\x41\xae\x4b\xbc\xde\xd1\x84\x2d\x61\x06\xff\xa7\x19\xff\x92\x5c\xb0\x79\x01\xf3\x7c\x5b\x50\xb3\x86\xee\xcf\xd2\x4b\x79\xdd\x86\xac\x7d\xf6\x57\xc0\x4e\xe3\x98\x5f\xec\x2c\xbe\xaf\x6a\x4c\x7d\x50\xb2\xa1\xa9\x2c\x9d\x94\x78\x93\x70\x4a\xe8\x88\x46\xbd\xfc\x9f\xc2\xae\x3e\x3f\x3a\xe3\x84\xe4\x2f\x2b\x7f\x0a\xc6\x36\x8c\xba\xc0\x67\x3f\xf5\xec\xce\x2a\x1d\x54\x59\xde\x16\xf7\x26\x27\xcf\x65\xf2\x96\xc2\x4a\xd9\x2f\x93\xe0\x65\x43\xab\x20\xb0\x73\x9e\x26\x29\xd7\xb1\xcd\xfd\x6d\x29\x5d\x32\xc9\x4e\x32\x97\x48\x91\xba\x34\x04\x8e\x2c\x35\xae\xb9\xe3\xf8\x2d\x67\xaf\xec\xea\xde\x57\x90\x92\x83\x04\x64\x19\x90\xa8\x4c\x8b\x3b\x7b\x78\xa2\x4f\x4a\xbe\x8a\xfa\x8d\x1f\x9c\xf0\xb9\x99\xe7\xcc\xc7\xba\xc1\xee\x40\xce\x1a\xe4\x27\x64\x63\xf2\xc5\x7d\xdd\x5b\x29\xf0\xde\xcb\xa9\xd1\x4c\x86\x33\x38\x33\xf2\x1b\x9d\xa2\xdc\x51\x97\x71\x90\xb2\x6b\xf6\x37\x00\x00\xff\xff\x80\x4e\x05\xad\x0e\x05\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1294, mode: os.FileMode(420), modTime: time.Unix(1455048467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

