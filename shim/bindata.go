// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1455913827, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\xb9\xc4\xc6\x02\xe5\x9e\x2e\xc3\x76\xe8\xb1\xc3\xb0\x8f\xd3\x30\x08\xae\xc5\x64\x06\x62\xd1\x93\x64\xcf\x40\x91\xff\x3e\x51\x1f\x8e\x9a\x66\x3d\x14\x21\x1f\xc9\x47\x3e\x3d\x4f\x8d\x01\x69\xf0\x08\x07\x30\xf8\x67\xec\x0c\x56\x1b\xb1\xb3\xad\xe9\x06\xb7\xd3\xa4\x50\xf6\xa4\xc6\x33\xda\x9d\x46\xeb\xc8\x3c\x93\xdb\xd4\x0f\x2b\x6e\xfb\x4a\x3e\xf0\x7d\xdc\x2e\x42\x10\xf3\xdf\x71\x76\x4f\x68\x6d\x73\xc2\x8c\x16\xa9\x58\xf3\xc3\xa2\xc9\x20\xff\x8e\xd9\xcf\x81\xe2\x93\x6a\x06\x77\x85\x5f\x25\x13\x33\xda\x81\xb4\x5d\xc6\xe7\x38\xa2\x37\xdc\x0b\xef\x0a\xe7\x81\x8c\xb3\xe2\x77\xa3\xd5\x99\xf1\xe3\xa8\x5b\xd7\x91\xae\x70\x42\xed\xb6\xd0\xba\xb9\x86\x97\x15\x00\x8f\x31\x78\x6e\xe6\x47\x06\x7c\x65\x28\x10\x52\x86\xa4\x0c\xd1\x43\xaa\x1b\xe3\x29\x1a\xff\x86\xab\xaa\x6b\x9f\x60\x48\x8e\x9d\xda\xfa\xd2\xb7\x7f\x2f\x77\xb3\x00\x86\xa8\xdf\x17\xf4\xa2\xf5\x0b\x6b\x3c\xf3\xa4\xbb\x2d\x97\x3a\xef\xd2\xdb\x53\x5a\xa5\x50\xbc\xe2\x35\x96\x12\x93\x5e\x8d\x8b\xc2\xa3\x95\x0b\x3b\x6c\xfa\xb0\x70\x49\x1f\x6f\xf6\x95\x11\xc9\x52\x28\x7c\x1e\x4f\x4f\xde\x21\x61\x74\x18\x2b\x92\x85\xd4\xa3\x9e\x0a\xd1\xa2\x73\x64\x06\x25\xea\xc9\xbf\x06\xc0\x91\x4c\xc5\x2b\xf9\xf8\x8b\xa1\x01\x3a\x7d\xdb\xe2\x91\x3a\xe9\x34\x18\x6a\xfd\x3d\xc2\xa7\x7e\xa6\x86\x5f\x6f\x39\x4a\x94\xd7\xba\x30\x4f\x77\x2c\x6f\xec\x7a\x38\x1c\xc0\x99\x11\xf3\xe8\x57\x02\xcc\x2c\xce\xfa\xfd\xc7\x35\xbc\xfb\xaf\x08\x1e\x5a\x7f\xd8\xc3\x4d\x09\xf7\x2e\x9c\xfd\x62\xc2\x7b\xaf\xb1\xbd\xed\x8b\x1a\xe6\x0f\x30\x7e\x7e\x9b\xba\x0a\xaa\xd6\x41\xac\x2c\x70\x8b\xdd\x84\x55\x1a\xbf\xbd\x5a\x58\x91\x5e\x0e\xf2\x3e\x16\x76\x6c\x5b\x44\x55\x65\x97\x39\x92\x16\xb5\xda\xa7\x41\x8e\xbe\xf9\x28\x1a\x33\xfa\x87\xff\x5f\x56\xff\x02\x00\x00\xff\xff\xc0\xc8\x2e\x1e\x10\x04\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1040, mode: os.FileMode(420), modTime: time.Unix(1455912853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

