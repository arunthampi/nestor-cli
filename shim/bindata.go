// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1455652496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x70\x3e\x34\x32\x66\xb8\x3b\x37\x6b\xb1\x1d\x7a\xec\x30\xec\xe3\x30\x14\x85\xe1\xda\x4c\xa2\xc1\x96\x3c\x49\x4e\x33\xb4\xf9\xef\xa3\x24\xcb\x56\x02\xaf\x03\x16\xa0\x70\x25\x92\x7a\x4f\xef\x91\xda\x57\x0a\x4a\x85\x1b\xb8\x06\x85\xbf\x06\xae\x90\xad\x8a\x4b\x5d\x2b\xde\x9b\x4b\x21\x1b\x2c\x3b\xd9\x0c\x2d\xea\x4b\x81\xda\x48\xf5\x28\xcd\x2a\x5b\x27\xb6\xec\x8b\xa4\x05\xd5\xd9\xf2\xc2\x2d\xfc\xfe\x37\x3c\x98\x3b\xd4\xba\xda\x62\x88\x46\x5b\x3e\xe7\xbb\x46\x15\x82\xf6\x7f\xbf\xfb\xc9\x41\x7c\x6c\xaa\xde\xcc\xe1\x93\xcd\x11\x19\x75\x2f\x85\x9e\x8e\x0f\x6b\x1f\x3d\xc3\x9e\x70\x13\x3c\xf4\x52\x19\x5d\xec\x2a\xd1\xb4\x36\xbe\x19\x44\x6d\xb8\x14\x0c\xf7\x28\x4c\x0e\xb5\x39\x64\xf0\x9c\x00\xd8\x63\x3a\xae\x35\x17\xdb\x5b\xb1\xa7\xcc\xfb\x07\xaa\x07\xd8\x48\xc5\x6c\x6c\x94\xaa\xa1\xe0\x67\x25\x7b\xe0\x02\xdc\x11\x45\x59\x7a\x99\xca\x90\x51\xa2\xd8\xfb\x33\x01\xf8\x86\xbd\x92\x75\x7f\x76\xe8\x03\x5c\x5f\x83\x51\x03\xc2\xc5\x85\x2b\xb7\x3f\xf6\x86\xfd\x1b\xdb\x41\xbe\xbc\x4c\x45\x0b\xf1\x45\xb0\x34\xcd\x02\x55\x88\xae\x5f\xf4\x83\xde\x9d\xc3\x52\x0f\xd8\xac\x63\x62\xff\x46\xc5\x14\xb6\xd5\xe1\xd6\x62\x91\x62\x01\xd3\x6d\x96\x6e\xb5\x1e\xf3\x06\x6f\xbe\xc0\x27\xd7\x07\x6c\xae\x2b\x6c\xa8\x1c\x78\x93\xcf\xe4\xa3\xdf\xf3\xe2\x2e\x80\x92\xb2\xbb\x8a\xe0\x8b\x9a\x2c\x16\xd8\xda\x93\x16\x4b\x8e\x59\xe0\xd2\xe9\xed\x48\x25\xea\x51\x66\x69\x4c\x29\x6a\xec\x73\x9b\xe4\xda\x3c\x26\x6c\xb0\xea\x1c\xe1\x18\xde\xdf\x99\x32\x7d\x24\x48\xd1\xe0\xe3\xb0\xbd\xa3\x99\xca\x4e\x9a\x09\x5f\x37\xd2\x5f\xba\x57\xb2\x26\x72\x85\xf5\x0e\x27\xcf\x96\x9c\x0d\xd1\x75\xb0\x86\xda\x2e\x32\xb3\x45\xb1\x35\x3b\xb8\x81\x77\xe1\x68\xcb\x41\x1b\x45\x71\x6d\x3b\x3d\xfd\x21\x07\xba\x2b\x36\x60\x24\x68\x34\x60\x76\x48\x5c\xdb\x56\x3e\x51\x8a\x65\xcb\x95\x14\x9d\x75\x99\x2a\x79\xf5\x48\x8f\xc3\x15\xa4\xf0\x36\x6e\x99\x9f\x92\x0b\xb6\xca\x61\x95\x3d\xac\x27\x10\x35\x8f\xad\xd3\x72\x5c\x32\x27\x70\x6e\xad\xf0\xc2\xc0\x94\x49\x4a\xf6\xed\x6f\x36\xb2\xcb\xe7\x81\x9d\xfb\x94\x66\xb6\xd0\x43\x5d\x13\x61\x36\xf7\x87\x91\xa5\x46\xd1\x5c\x79\xf3\x0a\x23\xbf\xd2\x2a\x89\xcd\x0f\xdf\x23\x60\x4b\x94\xa6\x09\x8d\x6c\xe4\x5d\x18\xc1\x19\xee\xc4\xfa\x83\x6d\x8b\xf4\xfd\x07\x7b\xf9\xbf\xd9\x4f\xa1\xf4\xc6\xeb\x73\x56\x1b\x26\xc8\x7d\xba\xe9\xd1\x5a\xea\xc5\xfc\xbc\x76\xbc\xc2\xf4\x64\xfb\x07\x7b\x95\x79\x2d\x27\x19\xdd\xe5\x15\xd6\xc8\xf7\xc8\x46\x88\x48\xc5\x46\x0a\xfc\x2f\x25\xf3\x65\x29\x93\x63\xf2\x27\x00\x00\xff\xff\x34\xb6\x9f\x99\x50\x06\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1616, mode: os.FileMode(420), modTime: time.Unix(1455652486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

