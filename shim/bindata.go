// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1454526111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xcb\xae\x9b\x30\x10\xdd\xf3\x15\xde\x61\x24\xe4\xec\x13\x75\xd1\x45\x97\xa9\xaa\xb4\x5d\x55\x15\x72\xec\x49\x8a\x0a\x36\xb5\x0d\xe5\x2a\xca\xbf\xdf\x19\x9b\xa7\x6e\x58\x58\xcc\x9c\x73\xe6\x3d\x48\xc7\x2a\x07\x37\xf6\x89\x39\xf8\xd7\xd7\x0e\x78\x2e\x0e\x5e\xb9\xba\x0b\x07\x63\x35\x54\xad\xd5\x7d\x03\xfe\x20\xfd\x5f\x03\x3e\x58\x97\x17\xa7\x8c\x64\x17\x7b\xb5\x01\x75\x24\x17\xd1\x48\xfe\x1f\x30\x86\x33\x78\x2f\xef\x30\xa3\x1b\x57\xe2\xfc\xf4\xe0\x66\x90\xfe\x93\xf7\x6b\x8c\xff\x59\xcb\x2e\xac\xf0\xce\x79\xca\x32\x18\x3b\xeb\x82\x17\x7f\xa4\xd1\x0d\x65\xb8\xf5\x46\x85\xda\x1a\x0e\x03\x98\x50\x32\x15\xc6\x82\x3d\x32\xc6\x6e\xd6\x71\x0a\x0b\x66\xf8\xe6\x6c\xc7\x6a\xc3\x22\x45\x54\x55\xea\xa4\x42\x24\x51\x19\xeb\x9c\x55\x58\xa1\x40\xd7\xaf\x49\xf0\x1b\x83\x7f\x14\x2c\xe8\x09\x75\xcf\x0c\x1f\x07\x8d\x1c\xbf\x10\x71\x23\x88\xce\x2a\x5a\x44\xec\x53\xc3\x06\xfe\xc7\xde\xf9\xaa\x11\x04\x55\x7d\xad\xcb\x58\xc7\xfe\x7b\xbc\xf0\x61\x42\x6b\xdb\xe3\x26\xad\x50\x38\x0c\x03\x0d\x45\x79\x21\x78\x16\x54\x41\xbb\xac\x84\x8a\xd8\x6c\x84\x53\x01\xe5\x36\x5c\x40\x30\x6a\xdc\xb4\x62\x52\xc4\x0d\xf3\x1d\x4b\xb6\xb1\xee\xad\x34\xb5\x8d\xcc\x84\xe4\x69\x6e\x68\xe7\xe5\x32\x1a\x0d\xd7\xfe\x7e\xc6\xdb\x5a\x73\x08\xb9\x2c\x9d\x72\xed\x76\xce\x23\x03\xb9\x71\xd4\xd3\x8d\xa6\x0b\xcd\x8b\x1d\x18\x23\x39\x50\x50\x0f\xc0\xa7\x7e\xcb\xf5\x3e\xb4\x35\x30\xaf\x1b\x8f\x44\xf8\x5e\x29\x00\xcd\xe7\x21\x07\xfb\x1d\x8c\x3e\x4e\x71\x92\x55\x2e\xd8\x05\xba\xe6\x6d\x05\xa3\x99\xad\xe3\xa5\xf7\x99\xbd\x07\x00\x00\xff\xff\x45\xb4\x25\xcc\x4f\x03\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 847, mode: os.FileMode(420), modTime: time.Unix(1454526102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
