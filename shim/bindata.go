// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1455244999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x8f\xda\x30\x10\xbd\xe7\x57\x4c\x73\x58\x8c\x1a\x85\x9e\xd9\xb2\x6a\x0f\x7b\xdc\xaa\xea\xc7\xa1\x42\x28\x0a\xc9\x00\xae\x12\x3b\xb5\x1d\x96\x8a\xe5\xbf\x77\x6c\x63\x62\x50\xba\x8b\xb4\xda\xd8\x33\x6f\xde\xf8\xcd\xc7\xbe\x54\x50\x28\xdc\xc0\x02\x14\xfe\xe9\xb9\x42\x36\xc9\x67\xba\x52\xbc\x33\x33\x21\x6b\x2c\x5a\x59\xf7\x0d\xea\x99\x40\x6d\xa4\x5a\x4b\x33\x99\xde\x27\x16\xf6\x4d\xd2\x81\x70\x16\x9e\xbb\x83\xbf\xff\x81\x07\xf3\x84\x5a\x97\x5b\x0c\xd6\xe8\xca\xfb\xfc\xd4\xa8\x82\xd1\x7e\xfb\xdb\x2f\x8e\xe2\x73\x5d\x76\x66\x30\x5f\x5d\xde\x27\x09\x1e\x3a\xa9\x8c\xce\x77\xa5\xa8\x1b\xcb\xb0\xe9\x45\x65\xb8\x14\x0c\xf7\x28\x4c\x06\x95\x39\x4c\xe1\x98\x00\xd8\x90\x2d\xd7\x9a\x8b\xed\xa3\xd8\x93\xe7\x72\x45\x78\x80\x8d\x54\xcc\xda\xce\x0f\xae\xc9\xf8\x55\xc9\x0e\xb8\x00\x17\x22\x2f\x0a\xff\xd8\x22\x78\x14\x28\xf6\x3e\x26\x00\xdf\xb0\x57\xbc\x96\x37\x41\x57\xb0\x58\x80\x51\x3d\xc2\xdd\x9d\x83\xdb\x1f\x7b\xc7\xde\xe6\x76\x94\x2f\x2f\x17\xd0\x88\x7d\x94\x2c\x4d\xa7\x21\x55\x88\x9e\x9f\x77\xbd\xde\xdd\xd2\x52\x25\xad\xd7\x29\xb1\x7f\x89\x7b\x5b\x84\x68\x50\x6c\xcd\x0e\x1e\xe0\x43\x08\x48\xd2\xe6\xba\xaf\x2a\xc4\x9a\x05\x0a\x23\x0b\x8d\xa2\x9e\xc3\xf2\xa8\x8d\x22\xa8\xa6\xcf\xf4\x97\xec\x41\x90\x1b\x99\x41\xa3\x01\xb3\x43\xd2\xbd\x69\xe4\x33\x79\x00\xe5\xce\x95\x14\x2d\x3d\xc8\x56\x89\x97\x6b\xea\xb0\x39\xa4\xf0\x3e\xce\xf8\xb7\xe4\x82\x4d\x32\x98\x4c\x57\x19\x15\xab\x6b\xfe\xce\x9d\x94\xa7\x95\xcf\xda\x65\x7f\x02\x6c\x34\x9e\xf3\x0b\x95\xc5\xd7\x55\x0d\xa9\x77\x4a\x56\xd4\x95\xb9\x95\x12\x2f\x12\x8e\x09\x1d\xac\x41\x2f\xf7\x4f\x61\x53\x1e\x1e\xad\x73\x04\x72\x97\x85\x3b\x79\xe7\xde\xb7\xba\xc0\x67\xd7\xf5\x6c\x40\xe5\xd6\x54\xf4\xbc\xce\x86\x22\x47\xbf\xe3\xe8\x2d\xd1\x4a\xd9\xce\x23\xf2\xbc\xa2\x51\x10\xd8\xd8\x48\xa3\x10\x2b\x54\x68\xdd\x08\xc6\xdb\xd0\x9b\x83\x22\x91\xd9\xd0\xcc\x52\xde\xe9\xc7\x4f\xb6\x2c\x91\xc1\xbf\x90\xc6\xdd\x12\x92\x29\x7d\xf0\x95\xbb\xc1\x5e\x49\xd5\x5e\xf6\x81\xd5\x21\x5a\x07\xcc\x6a\x90\xdd\x62\x43\xc2\xea\xbc\x62\x2c\xc8\x6d\x18\x76\xe5\x58\xb6\x4e\xbd\xff\x26\x97\x5d\xaa\x52\xe3\xba\xdf\x3e\xd1\x3a\xbb\x44\x0e\xcb\xce\xaf\xba\xc9\x94\x39\xae\x2b\x62\x0a\x56\x21\xdf\x23\x3b\x67\x9f\x0d\xab\xa6\x96\x22\x52\x6d\x6c\x2c\xa2\xc1\xf0\xc1\x8c\xfc\x4e\xa7\x50\xea\x53\x18\x3d\xdf\xc4\xc9\x29\xf9\x17\x00\x00\xff\xff\x65\xfa\x10\xfe\x8a\x05\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1418, mode: os.FileMode(420), modTime: time.Unix(1455244977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

