// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1455650966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x70\x3e\x34\x32\x66\xb8\x3b\xb7\x6b\xb1\x1d\x7a\xec\x30\xec\xe3\x30\x14\x85\xe1\xda\x4c\xa2\xc1\x96\x3c\x49\x4e\x33\xa4\xf9\xef\xa3\x24\xcb\x56\x02\xaf\x03\x16\xa0\xa8\x25\xf2\xe9\x91\x8f\x4f\xda\x55\x0a\x4a\x85\x6b\xb8\x01\x85\xbf\x06\xae\x90\xad\x8a\x4b\x5d\x2b\xde\x9b\x4b\x21\x1b\x2c\x3b\xd9\x0c\x2d\xea\x4b\x81\xda\x48\xf5\x24\xcd\x2a\xbb\x4e\x2c\xec\x8b\xa4\x05\xe1\x2c\xbc\x70\x0b\xbf\xff\x0d\xf7\xe6\x1e\xb5\xae\x36\x18\xa2\xd1\x96\xcf\xf9\xae\x51\x85\xa0\xfd\xf6\xbb\x9f\x1c\xc5\xc7\xa6\xea\xcd\x1c\x3e\xd9\x1c\x99\x51\xf7\x52\xe8\xe9\xf8\xb0\xbe\x4e\x12\xdc\xf7\x52\x19\x5d\x6c\x2b\xd1\xb4\x36\x61\x3d\x88\xda\x70\x29\x18\xee\x50\x98\x1c\x6a\xb3\xcf\xe0\x90\x00\xd8\x83\x3a\xae\x35\x17\x9b\x3b\xb1\xa3\xcc\x87\x47\xc2\x03\xac\xa5\x62\x36\x36\xca\xd1\x50\xf0\xb3\x92\x3d\x70\x01\xee\x88\xa2\x2c\xbd\x14\x65\xc8\x28\x51\xec\xfc\x99\x00\x7c\xcd\x5e\xc9\x7a\x38\x3b\xf4\x11\x6e\x6e\xc0\xa8\x01\xe1\xe2\xc2\xc1\xed\x8f\xbd\x61\xff\xe6\x76\x94\x2f\x2f\x13\x68\x21\xbe\x48\x96\xa6\x59\x28\x15\xa2\xf6\x8b\x7e\xd0\xdb\x73\x5a\x9a\xb3\xcd\x3a\x26\xf6\x6f\x54\x4c\x8d\x43\x17\xf8\xec\x0d\x40\xa0\xb6\xda\xdf\x39\x76\x83\x55\x57\x0e\xbc\xc9\x21\xda\x74\x9f\x25\x65\xfa\x48\xa8\xb3\xc1\xa7\x61\x73\x4f\x06\xcb\x9c\xea\xa4\x5b\x54\x4d\x8b\x62\x63\xb6\x70\x0b\xef\x42\xb1\x96\x5b\x1b\x45\x71\x6d\x47\x95\xfe\x90\x03\xd5\x80\x0d\x18\x09\x1a\x0d\x98\x2d\xd2\xe4\xda\x56\x3e\x53\x0a\x50\xf7\x5c\x49\xd1\x11\x95\x45\xf2\xea\x89\x1c\x7c\x05\x29\xbc\x8d\x7b\xfe\x29\xb9\x60\xab\x1c\x56\xd9\xe3\xf5\x44\xa2\x66\x6f\xb9\x1e\xc7\x25\x73\x8d\xfb\x5a\x61\x4a\xa2\xe6\xfa\xf6\x37\x1b\x0b\xcb\x67\xb3\xcd\x1a\x93\xdf\x0a\x3d\xd4\x35\xd5\xca\x0e\xd3\xb8\x8c\x2c\x35\x8a\xe6\xca\xeb\x59\x18\xf9\x95\x56\x63\xf4\x18\x74\x77\xff\x8f\x80\x2d\x55\xe3\xa1\xc1\x9b\xf8\xba\x2f\x02\x4f\xaf\x64\x4d\xb7\xae\xb0\x66\xc0\xc9\x04\x4b\x56\x09\xd1\x30\xf1\xb1\xcb\x30\xc4\x08\xe4\xc7\xe9\x56\x3e\x79\xf0\x57\xd9\x8a\x65\x6f\x72\xec\x07\x1b\x72\x53\x9f\x6d\x1a\xfd\x0e\x8b\xbb\x44\x2b\x65\x77\x15\x3b\xa8\xa6\xcb\x2c\xb0\xb5\x27\x2d\x42\x8e\x61\x2c\x64\xa2\x08\xc6\xbb\x70\xbb\x66\x45\x4e\xcc\xba\xb7\x7d\xa5\xef\x3f\x58\x5b\xfc\xcd\xb0\x14\x4a\x6f\xbd\x73\xce\xb0\x27\x52\x75\xd3\x7b\x67\x75\x88\x9e\x3b\x66\x35\xc8\xcf\xb1\xb3\x8f\xc6\x27\xd7\x3f\xb8\xab\xec\xcc\x66\xce\x1c\x0a\x6b\xe4\x3b\x64\x23\x47\xe4\xb2\x46\x0a\xfc\x2f\xa7\xe5\xcb\x56\x4b\x8e\xc9\x9f\x00\x00\x00\xff\xff\x6c\xa6\x5f\xd4\x10\x06\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 1552, mode: os.FileMode(420), modTime: time.Unix(1455650931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

