// Code generated by go-bindata.
// sources:
// bindata.go
// index.js
// DO NOT EDIT!

package shim

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1454511379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xbb\x8e\xd5\x30\x10\xed\xf3\x15\xee\xe2\x48\x91\x6f\xbf\x57\x14\x14\x94\x8b\xd0\x02\x15\x42\x91\xd7\x9e\x2c\x16\x89\x1d\x6c\x27\x04\xad\xf2\xef\x78\xc6\x79\x6a\x37\x45\xe4\x99\x73\xce\xbc\x27\xe9\x59\xe3\xa1\x65\x1f\x98\x87\x3f\xa3\xf1\xc0\x4b\x71\x0b\xca\x9b\x21\xde\xac\xd3\xd0\xf4\x4e\x8f\x1d\x84\x9b\x0c\xbf\x2d\x84\xe8\x7c\x59\xdd\x0b\x94\x3d\xb9\x67\x17\x93\x0e\xe5\x82\x8c\xec\xff\x06\x73\x7c\x84\x10\xe4\x0b\x6c\xe8\xc9\x95\x39\xdf\x03\xf8\x0d\xc4\x77\xf6\x7e\xa6\xf8\x1f\xb5\x1c\xe2\x01\x5f\x9c\xf7\xa2\x80\x79\x70\x3e\x06\xf1\x4b\x5a\xdd\x61\x86\x76\xb4\x2a\x1a\x67\x39\x4c\x60\x63\xcd\x54\x9c\x2b\xf6\x5a\x30\xd6\x3a\xcf\x31\x2c\xd8\xe9\x8b\x77\x03\x33\x96\x11\x45\x34\x4d\xee\xa4\x49\x48\xa6\x32\x36\x78\xa7\x52\x85\x22\xb9\x7e\xac\x82\x9f\x29\xf8\x5b\xc1\x8e\xde\x93\x6e\x29\xd2\xcf\x43\x27\xe7\x4f\x48\x3c\x09\xc8\xd9\x90\x85\xc4\x31\x37\x6c\xe1\x2f\xf5\xce\x0f\x8d\x40\xa8\x19\x8d\xae\xa9\x8e\xeb\xf7\xfa\x8e\x2f\x25\x74\xae\x7f\x38\xa5\x15\x2a\x0d\xc3\x42\x87\x51\xde\x11\x2c\x15\x56\xd0\xef\x2b\xc1\x22\x4e\x1b\xe1\x58\x40\x7d\x0e\x17\x13\x48\x1a\xbf\xae\x18\x15\xb4\x61\x7e\x61\xc9\x9e\xea\x3e\x4b\x73\xdb\x89\x99\x91\x32\xcf\x2d\xd9\x65\xbd\x8f\x46\xc3\xf3\xf8\xf2\x98\x6e\xeb\xc8\x21\xe4\xbe\x74\xcc\x75\xd9\x39\x27\x46\xe2\xd2\xa8\xd7\x1b\xcd\x17\x5a\x56\x17\x90\x22\x79\x50\x60\x26\xe0\x6b\xbf\xf5\x71\x1f\xda\x59\xd8\xd6\x6d\xda\x8b\xc9\xf0\x6a\x44\x18\x95\x02\xd0\xfc\x98\x7a\x74\x5f\xc1\xea\x87\x35\x74\xb6\xea\x13\xfa\x04\x43\xf7\xef\x80\xc9\x2c\xb6\xa9\xd3\x63\x61\xd0\x05\xb8\xa4\x69\xa5\xe9\x38\xf5\x8e\x07\x94\xf7\xb3\x14\xff\x03\x00\x00\xff\xff\x71\x7e\xc1\x1d\x8a\x03\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 906, mode: os.FileMode(420), modTime: time.Unix(1454511373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"index.js":   indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"index.js":   &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
